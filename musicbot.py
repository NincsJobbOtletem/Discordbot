import discord
from discord import app_commands
import yt_dlp as youtube_dl
import asyncio
from dotenv import load_dotenv
import os
import openai
import requests
from datetime import datetime
import random
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

load_dotenv()

# Bot inicializ√°l√°sa
intents = discord.Intents.default()
intents.message_content = True
bot = discord.Client(intents=intents)
tree = app_commands.CommandTree(bot)

# WAV f√°jl ment√©si mappa
MUSIC_FOLDER = "MUSIC"

# YouTube DL be√°ll√≠t√°sok
ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,  # Playlist t√°mogat√°s
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'ytsearch1',  # C√≠m alapj√°n keres√©s
    'source_address': '0.0.0.0',  # IPv4 prefer√°l√°sa
    'http_chunk_size': 1048576  # Adat chunk m√©ret n√∂vel√©se
}

ffmpeg_options = {
    'options': '-vn'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)
queue = []

log_file = "music_bot_log.txt"

#spoti decl test
SPOTIFY_CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')

if not SPOTIFY_CLIENT_ID or not SPOTIFY_CLIENT_SECRET:
    print("‚ùå Nincsenek be√°ll√≠tva a Spotify API kulcsok!")
    exit()

spotify = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
    client_id=SPOTIFY_CLIENT_ID, 
    client_secret=SPOTIFY_CLIENT_SECRET
))

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))
        if 'entries' in data:
            return [cls(discord.FFmpegPCMAudio(entry['url'], **ffmpeg_options), data=entry) for entry in data['entries']]
        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)

@bot.event
async def on_ready():
    print(f"Bejelentkezve mint {bot.user}")
    try:
        synced = await tree.sync()
        print(f"Sikeresen szinkroniz√°lt parancsok: {len(synced)}")
        for command in synced:
            print(f"Parancs neve: {command.name}")
    except Exception as e:
        print(f"Hiba a parancsok szinkroniz√°l√°sakor: {e}")

# /join parancs
@tree.command(name="join", description="Megh√≠vja a botot a voice channelbe")
async def join(interaction: discord.Interaction):
    if not interaction.user.voice:
        await interaction.response.send_message("Nem vagy voice channelben!", ephemeral=True)
        return
    channel = interaction.user.voice.channel
    if interaction.guild.voice_client:
        await interaction.response.send_message("M√°r csatlakozva vagyok egy voice channelhez.", ephemeral=True)
        return
    await channel.connect()
    await interaction.response.send_message("Csatlakoztam a voice channelhez.")

# restartt stteam
async def restart_stream(interaction, track_url):
    """√öjraind√≠tja a streamet, ha megszakad."""
    try:
        players = await YTDLSource.from_url(track_url, loop=bot.loop, stream=True)
        voice_client = interaction.guild.voice_client
        if not voice_client:
            await interaction.user.voice.channel.connect()
            voice_client = interaction.guild.voice_client

        def after_playing(e):
            if e:
                print(f"Hiba a lej√°tsz√°s k√∂zben: {e}")
                asyncio.run_coroutine_threadsafe(restart_stream(interaction, track_url), bot.loop)

        voice_client.play(players, after=after_playing)
        await interaction.channel.send(f"A zene √∫jraindult: {players.title}")
    except Exception as e:
        print(f"Hiba az √∫jraind√≠t√°s sor√°n: {e}")
        await interaction.channel.send("Nem siker√ºlt √∫jraind√≠tani a zen√©t.")
#convert
def convert_spotify_to_youtube(spotify_url):
    """√Åtalak√≠tja a Spotify URL-t egy YouTube keres√©si lek√©rdez√©ss√©."""
    try:
        track_id = spotify_url.split("/")[-1].split("?")[0]
        track_info = spotify.track(track_id)
        
        if not track_info:
            print("‚ùå A Spotify API nem adott vissza adatot!")
            return None
        
        track_name = track_info['name']
        artist_name = track_info['artists'][0]['name']
        search_query = f"ytsearch1:{track_name} {artist_name}"

        print(f"üéµ Spotify konvert√°lva: {search_query}")  # Debug log
        
        return search_query
    except Exception as e:
        print(f"‚ùå Hiba t√∂rt√©nt a Spotify feldolgoz√°sa sor√°n: {e}")
        return None

# /play parancs
@tree.command(name="play", description="Lej√°tszik egy sz√°mot, Spotify URL-t vagy YouTube keres√©st")
async def play(interaction: discord.Interaction, search: str):
    if not interaction.user.voice:
        await interaction.response.send_message("El≈ësz√∂r csatlakozz egy voice channelhez!", ephemeral=True)
        return

    voice_client = interaction.guild.voice_client
    if not voice_client:
        await interaction.user.voice.channel.connect()
        voice_client = interaction.guild.voice_client

    await interaction.response.defer()  # Jelezz√ºk, hogy dolgozunk a v√°laszon

    # Ha Spotify URL-t kaptunk, konvert√°ljuk YouTube keres√©ss√©
    if "open.spotify.com/track" in search:
        search = convert_spotify_to_youtube(search)
        if not search:
            await interaction.followup.send("Nem siker√ºlt feldolgozni a Spotify linket.")
            return

    try:
        players = await YTDLSource.from_url(search, loop=bot.loop, stream=True)

        if isinstance(players, list):
            queue.extend(players)
            if not voice_client.is_playing():
                def after_playing(e):
                    if e:
                        print(f"Hiba a lej√°tsz√°s k√∂zben: {e}")
                        asyncio.run_coroutine_threadsafe(restart_stream(interaction, search), bot.loop)

                    asyncio.run_coroutine_threadsafe(check_queue(interaction), bot.loop)

                voice_client.play(queue.pop(0), after=after_playing)
            await interaction.followup.send(f"Hozz√°adva a v√°r√≥list√°hoz: {players[0].title}")
        else:
            queue.append(players)
            if not voice_client.is_playing():
                def after_playing(e):
                    if e:
                        print(f"Hiba a lej√°tsz√°s k√∂zben: {e}")
                        asyncio.run_coroutine_threadsafe(restart_stream(interaction, search), bot.loop)

                    asyncio.run_coroutine_threadsafe(check_queue(interaction), bot.loop)

                voice_client.play(queue.pop(0), after=after_playing)
                await interaction.followup.send(f"Most j√°tszom: {players.title}")
            else:
                await interaction.followup.send(f"Hozz√°adva a v√°r√≥list√°hoz: {players.title}")
    except Exception as e:
        await interaction.followup.send("Hiba t√∂rt√©nt a sz√°m bet√∂lt√©sekor.")
        print(e)
        
# queckecker
async def check_queue(interaction):
    voice_client = interaction.guild.voice_client
    if queue and not voice_client.is_playing():
        next_song = queue.pop(0)
        def after_playing(e):
            if e:
                print(f"Hiba a lej√°tsz√°s k√∂zben: {e}")
                asyncio.run_coroutine_threadsafe(restart_stream(interaction, next_song.data['url']), bot.loop)

            asyncio.run_coroutine_threadsafe(check_queue(interaction), bot.loop)

        voice_client.play(next_song, after=after_playing)
        await interaction.channel.send(f"Most j√°tszom: {next_song.title}")

#logol√°s lenne de szar      
def log_song(user, title, queued=False):
    """ Logolja a sz√°mot, a k√©r≈ë nev√©t √©s az id≈ëpontot. """
    action = "V√°r√≥list√°hoz adva" if queued else "Lej√°tszva"
    try:
        with open(log_file, "a") as f:
            f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {user} - {action}: {title}\n")
    except Exception as e:
        print(f"Nem siker√ºlt logolni: {e}")


# /skip parancs
@tree.command(name="skip", description="√Åtugorja az aktu√°lis sz√°mot")
async def skip(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client
    await interaction.response.defer()  # Jelezz√ºk, hogy dolgozunk a v√°laszon
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        await interaction.followup.send("A sz√°m √°tugr√°sra ker√ºlt.")
    else:
        await interaction.followup.send("Nincs sz√°m lej√°tsz√°sban, amit √°t lehetne ugrani.")


# /stop parancs
@tree.command(name="stop", description="Le√°ll√≠tja a zen√©t √©s t√∂rli a v√°r√≥list√°t")
async def stop(interaction: discord.Interaction):
    voice_client = interaction.guild.voice_client
    await interaction.response.defer()  # Jelezz√ºk, hogy dolgozunk a v√°laszon
    if voice_client and voice_client.is_playing():
        voice_client.stop()
        queue.clear()
        await interaction.followup.send("A zene lej√°tsz√°sa le√°ll√≠tva, √©s a v√°r√≥lista t√∂r√∂lve.")
    else:
        await interaction.followup.send("Nincs zene a lej√°tsz√°sban.")
# remove parancs
@tree.command(name="remove", description="Elt√°vol√≠t egy dalt a v√°r√≥list√°b√≥l a poz√≠ci√≥ alapj√°n")
async def remove(interaction: discord.Interaction, position: int):
    await interaction.response.defer()
    if position < 1 or position > len(queue):
        await interaction.followup.send("√ârv√©nytelen poz√≠ci√≥!", ephemeral=True)
        return

    removed_song = queue.pop(position - 1)
    await interaction.followup.send(f"Elt√°vol√≠tva a v√°r√≥list√°b√≥l: {removed_song.title}")
    
# eg√©sz list√°t t√∂rli
@tree.command(name="clear", description="T√∂rli a v√°r√≥list√°t")
async def clear(interaction: discord.Interaction):
    await interaction.response.defer()
    queue.clear()
    await interaction.followup.send("A v√°r√≥lista t√∂r√∂lve!")
    
#segitseg
@tree.command(name="help", description="Felsorolja az el√©rhet≈ë parancsokat")
async def help_command(interaction: discord.Interaction):
    commands = [
        {"name": "/play <keres√©s>", "description": "Lej√°tszik egy sz√°mot, Spotify URL-t vagy YouTube playlistet."},
        {"name": "/remove <poz√≠ci√≥>", "description": "Elt√°vol√≠t egy dalt a v√°r√≥list√°b√≥l a poz√≠ci√≥ alapj√°n."},
        {"name": "/clear", "description": "T√∂rli a v√°r√≥list√°t."},
        {"name": "/join", "description": "Megh√≠vja a botot a voice channelbe."},
        {"name": "/skip", "description": "√Åtugorja az aktu√°lis sz√°mot."},
        {"name": "/stop", "description": "Le√°ll√≠tja a zen√©t √©s t√∂rli a v√°r√≥list√°t."},
        {"name": "/help", "description": "Felsorolja az el√©rhet≈ë parancsokat."}
    ]

    help_message = "El√©rhet≈ë parancsok:\n"
    for command in commands:
        help_message += f"**{command['name']}** - {command['description']}\n"

    await interaction.response.send_message(help_message)        
        
# /motivate motiv√°lo game
@tree.command(name="motivate", description="K√ºld egy motiv√°ci√≥s √ºzenetet.")
async def motivate(interaction: discord.Interaction):
    await interaction.response.defer()  # Jelezd, hogy dolgozol
    try:
        quotes = [
    "Ne feledd, a nap mindig s√ºt valahol!",
    "Ma egy √∫j lehet≈ës√©g, hogy jobb legy√©l!",
    "A kudarc az els≈ë l√©p√©s a sikerhez!",
    "Nevess sokat, az ingyen van!",
    "Ne agg√≥dj, a bot mindig itt van neked!",
    "A mosolyod a legjobb √©kszered!",
    "A v√°ltoz√°s a n√∂veked√©s kulcsa.",
    "Minden nap √∫j es√©lyt hoz!",
    "Higgy magadban, mert senki m√°s nem fog helyetted.",
    "Soha ne add fel, mert a siker k√∂zel lehet!",
    "Minden k√ºzdelem er≈ësebb√© tesz.",
    "A neh√©zs√©gek csak √°tmeneti √°llom√°sok.",
    "A boldogs√°g nem c√©l, hanem √∫t.",
    "T√∂rekedj arra, hogy a mai nap jobb legyen, mint a tegnap.",
    "A legnagyobb er≈ëss√©g az, ha kitartasz.",
    "Minden √°lom megval√≥s√≠that√≥, ha dolgozol √©rte.",
    "A kreativit√°s a siker egyik titka.",
    "A legjobb id≈ë elkezdeni valamit az most!",
    "A bels≈ë b√©ke a legnagyobb aj√°nd√©k.",
    "Az √©let t√∫l r√∂vid ahhoz, hogy agg√≥dj.",
    "Tudd, hogy k√©pes vagy t√∂bbre, mint amit gondolsz!",
    "B√≠zz az utadban, m√©g ha nem is l√°tod a v√©g√©t.",
    "A mosolyod valaki napj√°t szebb√© teheti.",
    "A siker nem v√©gleges, a kudarc nem v√©gzetes: csak a b√°tors√°g sz√°m√≠t.",
    "Az akad√°lyok csak kih√≠v√°sok, amiket meg kell oldani.",
    "A pozit√≠v gondolkod√°s csod√°kat tehet.",
    "L√©gy h√°l√°s minden apr√≥s√°g√©rt az √©letben.",
    "A kudarc tan√≠t meg arra, hogyan legy√©l sikeres.",
    "A boldogs√°g d√∂nt√©s k√©rd√©se.",
    "Minden nap egy √∫j lehet≈ës√©g arra, hogy fejl≈ëdj.",
    "Az √©let sz√≠nes, ha √∫gy d√∂ntesz, hogy azz√° teszed.",
    "A legjobb tanul√°s a tapasztalatb√≥l sz√°rmazik.",
    "Minden utaz√°s egy l√©p√©ssel kezd≈ëdik.",
    "A b√°tors√°g az, amikor folytatod akkor is, ha f√©lsz.",
    "L√©gy b√ºszke arra, amit eddig el√©rt√©l.",
    "A legnagyobb kih√≠v√°s magadat legy≈ëzni.",
    "Az optimizmus a kulcs a boldogs√°ghoz.",
    "A nevet√©s a legjobb orvoss√°g.",
    "Minden pillanat egy √∫j kezdet.",
    "A kis l√©p√©sek is sz√°m√≠tanak.",
    "A t√ºrelem r√≥zs√°t terem.",
    "A sikert nem m√©rik az id≈ëvel, hanem a kitart√°ssal.",
    "Az √©let egy kaland, √©lvezd ki minden pillanat√°t!",
    "Higgy az √°lmaidban, √©s val√≥s√≠tsd meg ≈ëket!",
    "A szeretet a legnagyobb er≈ë.",
    "Mindig van rem√©ny, m√©g a legs√∂t√©tebb napokon is.",
    "A kih√≠v√°sok teszik az √©letet izgalmass√°.",
    "A j√∂v≈ë azok√©, akik hisznek benne.",
    "A kitart√°s a kulcs minden sikerhez.",
    "Az igazi boldogs√°g bel√ºlr≈ël fakad.",
    "A legjobb dolgok a v√°rakoz√°son t√∫l t√∂rt√©nnek.",
    "Tarts ki, a legjobb m√©g h√°travan!",
    "Az √©let sz√©p, ha tudsz hinni benne.",
    "A pozit√≠v gondolkod√°s a siker alapja.",
    "A szeretet mindig visszat√©r hozz√°d.",
    "Minden neh√©zs√©g egy √∫j lehet≈ës√©g.",
    "L√©gy √∂nmagad legjobb verzi√≥ja.",
    "A nevet√©s a boldogs√°g kulcsa.",
    "A lehet≈ës√©gek ott vannak mindenhol.",
    "Minden nap egy √∫j fejezet az √©letedben.",
    "L√©gy az a v√°ltoz√°s, amit l√°tni akarsz a vil√°gban.",
    "A legnagyobb b√°tors√°g az, ha √∂nmagad vagy.",
    "A szeretet mindent legy≈ëz.",
    "A boldogs√°g az apr√≥ dolgokban rejlik.",
    "Az √©let r√∂vid, √©lvezd ki minden perc√©t.",
    "A hit hegyeket mozgat.",
    "A szeretet mindig gy≈ëz.",
    "Tedd szebb√© valaki napj√°t!",
    "A legjobb id≈ë a v√°ltoz√°sra az most van.",
    "Higgy magadban, √©s b√°rmit el√©rhetsz.",
    "Minden nagy dolog kis l√©p√©sekkel kezd≈ëdik."
]
        quote = random.choice(quotes)
        await interaction.followup.send(quote)
    except Exception as e:
        await interaction.followup.send("Hiba t√∂rt√©nt a motiv√°ci√≥s √ºzenet k√ºld√©se k√∂zben.")
        print(e)

   
   
# /trivia k√©rd√©sek  
trivia_questions = {
    "Mi Magyarorsz√°g f≈ëv√°rosa?": "Budapest",
    "H√°ny l√°ba van egy p√≥knak?": "8",
    "Ki √≠rta a 'Harry Potter' sorozatot?": "J.K. Rowling",
    "Melyik bolyg√≥ a Naprendszer legnagyobb bolyg√≥ja?": "Jupiter",
    "Melyik √©vben t√∂rt√©nt a holdrasz√°ll√°s?": "1969",
    "Melyik orsz√°g h√≠res a pizz√°r√≥l?": "Olaszorsz√°g",
    "H√°ny perc egy √≥ra?": "60",
    "Melyik kontinens legnagyobb?": "√Åzsia",
    "H√°ny sz√≠n van a sziv√°rv√°nyban?": "7",
    "Melyik √°llat ismert hossz√∫ nyak√°r√≥l?": "Zsir√°f",
    "Mi a v√≠z vegyjele?": "H2O",
    "Melyik orsz√°gban van a Taj Mahal?": "India",
    "H√°ny l√°ba van egy polipnak?": "8",
    "Melyik sporthoz tartozik a Wimbledon?": "Tenisz",
    "Mi az emberi test legnagyobb szerve?": "B≈ër",
    "Ki festette a Mona Lis√°t?": "Leonardo da Vinci",
    "H√°ny csillag van az amerikai z√°szl√≥n?": "50",
    "Mi a F√∂ld legm√©lyebb √≥ce√°nja?": "Csendes-√≥ce√°n",
    "Melyik orsz√°gban van az Eiffel-torony?": "Franciaorsz√°g",
    "Melyik bolyg√≥t nevezik a V√∂r√∂s Bolyg√≥nak?": "Mars",
    "Milyen sz√≠n≈± a zebra cs√≠kja?": "Fekete-feh√©r",
    "H√°ny √©vszak van egy √©vben?": "4",
    "Mi a F√∂ld legnagyobb sivataga?": "Szahara",
    "Milyen sz√≠n≈± a Nap?": "S√°rga",
    "Ki volt Albert Einstein?": "Fizikus",
    "H√°ny nap van egy √©vben?": "365",
    "Melyik √°llat ismert a lass√∫s√°g√°r√≥l?": "Lajh√°r",
    "Melyik √©vben t√∂rt√©nt a Titanic els√ºllyed√©se?": "1912",
    "Melyik foly√≥ a leghosszabb a vil√°gon?": "N√≠lus",
    "Melyik orsz√°gban van a Colosseum?": "Olaszorsz√°g",
    "Mi az emberi test legkisebb csontja?": "Kengyel",
    "Mi a tej f≈ë alkot√≥eleme?": "Kalcium",
    "Melyik √°llat ad tejet?": "Teh√©n",
    "Melyik sporthoz kell √ºt≈ë?": "Tenisz",
    "Melyik √©gitest kering a F√∂ld k√∂r√ºl?": "Hold",
    "Milyen √°llat a Nemo a 'N√©m√≥ nyom√°ban' c√≠m≈± filmben?": "Boh√≥chal",
    "Mi a Himal√°ja legmagasabb hegye?": "Mount Everest",
    "Melyik √°llat mondja, hogy 'm√∫√∫'?": "Teh√©n",
    "Mi a leggyorsabb sz√°razf√∂ldi √°llat?": "Gep√°rd",
    "H√°ny nap van egy sz√∂k≈ë√©vben?": "366",
    "Melyik orsz√°g z√°szlaja piros-feh√©r?": "Lengyelorsz√°g",
    "Melyik bolyg√≥ a legk√∂zelebb a Naphoz?": "Merk√∫r"
}

@tree.command(name="trivia", description="Egy trivia k√©rd√©s.")
async def trivia(interaction: discord.Interaction):
    await interaction.response.defer()  # Jelezd, hogy dolgozol
    try:
        question, answer = random.choice(list(trivia_questions.items()))
        await interaction.followup.send(f"K√©rd√©s: {question}  (30 m√°sodpercedvan v√°laszolni)")

        def check(msg):
            return msg.author == interaction.user and msg.channel == interaction.channel

        try:
            response = await bot.wait_for("message", check=check, timeout=30.0)
            if response.content.lower() == answer.lower():
                await interaction.channel.send(f"Gratul√°lok, {response.author.mention}! A v√°lasz helyes: {answer}")
            else:
                await interaction.channel.send(f"Sajn√°lom, {response.author.mention}, a helyes v√°lasz: {answer}")
        except asyncio.TimeoutError:
            await interaction.channel.send(f"Id≈ë lej√°rt! A helyes v√°lasz: {answer}")
    except Exception as e:
        await interaction.followup.send("Hiba t√∂rt√©nt a trivia parancs futtat√°sa k√∂zben.")
        print(e)
 
#win command 
@tree.command(name="nyerni_fogunk", description="Megtippeli, hogy nyerni fogunk-e.")
async def nyerni_fogunk(interaction: discord.Interaction):
    await interaction.response.defer()  # Jelezd, hogy dolgozol
    try:
        # Esem√©ny val√≥sz√≠n≈±s√©gek
        choices = [
            ("Igen, biztosan nyerni fogunk!", 65),  # 65% es√©ly
            ("Nem, sajnos nem fogunk nyerni...", 25),  # 25% es√©ly
            ("Uhh, ez annyira neh√©z k√©rd√©s, √©n sem tudom megmondani. Mindk√©t csapat olyan rossz!", 10)  # 10% es√©ly
        ]

        # V√°laszt√°s a val√≥sz√≠n≈±s√©gek alapj√°n
        result = random.choices(
            population=[choice[0] for choice in choices],  # Lehets√©ges v√°laszok
            weights=[choice[1] for choice in choices],  # Val√≥sz√≠n≈±s√©gi s√∫lyok
            k=1  # Egyetlen v√°laszt√°s
        )[0]

        # K√ºldj√ºk el a v√°laszt
        await interaction.followup.send(result)

    except Exception as e:
        await interaction.followup.send("Hiba t√∂rt√©nt a v√°lasz elk√©sz√≠t√©se k√∂zben.")
        print(e)
        
#wav lej√°tszasa:
# Biztos√≠tjuk, hogy a zene mappa l√©tezik
if not os.path.exists(MUSIC_FOLDER):
    os.makedirs(MUSIC_FOLDER)

@tree.command(name="play_wav", description="Lej√°tszik egy felt√∂lt√∂tt WAV f√°jlt √©s elmenti a 'zene' mapp√°ba.")
async def play_wav(interaction: discord.Interaction, attachment: discord.Attachment):
    if not interaction.user.voice:
        await interaction.response.send_message("El≈ësz√∂r csatlakozz egy voice channelhez!", ephemeral=True)
        return

    voice_client = interaction.guild.voice_client
    if not voice_client:
        await interaction.user.voice.channel.connect()
        voice_client = interaction.guild.voice_client

    # Ellen≈ërizz√ºk, hogy a f√°jl val√≥ban WAV form√°tum√∫-e
    if not attachment.filename.endswith(".wav"):
        await interaction.response.send_message("Hiba: Csak WAV f√°jlokat tudok lej√°tszani!", ephemeral=True)
        return

    # F√°jl ment√©si √∫tvonal
    sanitized_filename = f"{interaction.user.id}_{attachment.filename}"
    file_path = os.path.join(MUSIC_FOLDER, sanitized_filename)

    try:
        # F√°jl let√∂lt√©se a 'zene' mapp√°ba
        await attachment.save(file_path)
        await interaction.response.send_message(f"F√°jl mentve √©s lej√°tsz√°s indul: `{sanitized_filename}`")

        # Lej√°tsz√°s FFmpeg seg√≠ts√©g√©vel
        source = discord.FFmpegPCMAudio(file_path, executable="ffmpeg")
        if voice_client.is_playing():
            voice_client.stop()  # Ha m√°sik sz√°m megy, azt le√°ll√≠tjuk
        voice_client.play(source)

    except Exception as e:
        await interaction.response.send_message(f"Hiba t√∂rt√©nt a lej√°tsz√°s sor√°n: {e}")
        print(f"Hiba: {e}")
        
        
#rem√©nytelen de tal√°n
@tree.command(name="chat", description="Egy √ºzenetet k√ºld a Hugging Face GPT modellnek.")
async def chat(interaction: discord.Interaction, message: str):
    await interaction.response.defer()
    try:
        response = chatbot(message, max_length=100, num_return_sequences=1)
        await interaction.followup.send(response[0]['generated_text'])
    except Exception as e:
        print(f"Hiba t√∂rt√©nt a Hugging Face API-val: {e}")
        await interaction.followup.send("Nem siker√ºlt v√°laszt adni a k√©rd√©sre.")


#beszedfelismero
async def listen_to_speech(interaction: discord.Interaction):
    try:
        recognizer = sr.Recognizer()
        with sr.Microphone() as source:
            await interaction.response.send_message("Hallgatlak...")
            audio = recognizer.listen(source, timeout=10)

        # Speech-to-Text konvert√°l√°s
        text = recognizer.recognize_google(audio, language="hu-HU")
        await interaction.followup.send(f"Ezt hallottam: {text}")
        
        # OpenAI seg√≠ts√©g√©vel v√°lasz
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": text}]
        )
        v√°lasz = response['choices'][0]['message']['content']
        await interaction.followup.send(v√°lasz)
    except sr.UnknownValueError:
        await interaction.followup.send("Nem √©rtettem, mit mondt√°l.")
    except sr.RequestError as e:
        await interaction.followup.send(f"Hiba t√∂rt√©nt a Speech-to-Text API-val: {e}")

@tree.command(name="listen", description="Figyeli a besz√©det √©s v√°laszol.")
async def listen(interaction: discord.Interaction):
    await listen_to_speech(interaction)

bot.run(os.getenv('BOT_TOKEN'))
